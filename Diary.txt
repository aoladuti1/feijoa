
[10/10/2022] 
Since first committing to this project a few days ago, 
I have managed to set up scripts for generating parsers and parsing/running .fj files.
Further to this, I have implemented and provided a basis for a duck-typing system,
and added assignment (-> or <-) and addition (+) operators which are fully functional. Parentheses are supported.

Next Steps:
   1 - Add all mathematical operations
   2 - Add comparison / extra operators

[31/10/2022]
Since my last diary entry I have improved my scripts, BNF structure and added exponentiation. 

Next Steps:
   1 - Continue adding operations
   2 - remove the -> operator for now. Use for function chaining later.

[07/11/2022]
Since my last diary entry I have implemented a better structure for my BNF that respects operation order.
I added multiply functionality too, and ensured the not operator would work when applied repeatedly (!!false == false).
It was tricky to find a good way to make the order of operations not too verbose and fit with duck typing.

Next steps:
   1 - Finish adding all operations
   2 - Make helper functions / class for duck typing
   3 - Change strings to double quotes instead of single quotes

[10/11/2022]
Since my last diary entry, I added helper functions for duck typing, boolean algebra, 
tighter BNF formatting and a plus-equals operator '+<-'.
I had to avoid += due to it looking weird in this language.
I also had a lot of trouble with the not operator priority as it was meshed with math operators.

Next steps:
   1 - Make a helper class
   2 - Finish adding operations
   3 - Start work on branching

[18/11/2022]
Since my last diary entry, I detoured from adding operators to work on branching.
I added working if and chainable else if statements. This was done by evaluating the prior if or else if statement
expression and exploiting the longest-match parse nature of art.

Next steps:
   1 - Make a helper class
   2 - Add an else branch
   3 - Finish a good chunk of operators

[21/11/2022]
Since my last diary entry, I properly implemented my FJ helper class and added
a 'while' and 'until' loop, with code neatening. Some extra operations were also added
(minusEquals, negate, equ [equals]...)

Next steps:
   1 - Add a less than operator
   2 - Implement structs
   3 - Implement basic functions

[24/11/2022]
Since my last diary entry, I implemented structs. Doing so required extreme levels of planning and attention to detail.
The arrow <- is the struct assignment operator now. Due to misspecification in the BNFmy first solution to struct
implementation involved processing going from the last argument to the first one, in a convoluted way, 
but I remedied this to be front to back.
Later, I also implemented an argument context stack (FJArgStack.java) that uses
pushes and pops of a context ArrayList to figure out what variable the argument(s) are being passed to, 
what argument is currently being processed, and how many arguments there are in total.

FJ.java was extended to assist with struct definition and holds a hashtable with key, value
pairings of [the struct type name] (String) and [its member variables] (ArrayList<FJNamedObject>). Note that an FJNamedObj
is a pair-type class for Java classes String and Object.
FJ.java also holds a HashMap of struct typenames as keys and an ArrayList of FJNamedObj member variables as values.

Python-like argument comments called argNotes were implemented too. After specifying an argument, before the comma separator,
you can add a colon and then text equivalent to a valid variable name. e.g. z <- Donkey(10: weight_donkey). ArgNotes are purely visual
and do nothing programmatically.

Next steps:
    1 - Add a less than operator
    2 - Add a walrus operator
    3:

