foo = 10;

// what(ever[man]) is a dummy return type hint
// type hints only are allowed in formal function definitions
def func(foo : type[Hint] = 5, bar=2) -> what(ever[man]) {
    sysln!(bar);
    return foo; // it will return 5 - see the way the scope is correct?
}

sysln!(func(bar=700)); // prints 5 and then 700

    /* standard java-style lambda syntax */ 
// ...but see that default args are possible
msgOne = (txt="default") -> { txt += ""; sysln!(txt);  };

// parentheses are optional for a single argument
// curly braces are optional for a single function expression in the body
msgTwo = txt -> sysln!(txt);

msgOne("i am a lambda");
msgTwo(txt="i am also a lambda"); // arg selection still possible

def lambdaCaller(a) { a(); }
lambdaCaller(() -> sysln!("i am a function called with a lambda"));

    /* See Python-style lambdas -- right side is returned, left side is for args */
pyDouble = lambda x : x * 2;
// parentheses optional for any number of args in python-style
pyAdd = lambda x, y : x + y; 

sysln!("The double of 10 is " + pyDouble(10));
sysln!(5 + " add " + 5 + " is " + pyAdd(5, 5));

// See nested functions
def printNested() {
    def x() {
        msg = "i was called from a nested function";
        def y() {
            sysln!(msg);
        }
        y();
    }
    return x;
}

printNested()(); // prints "i was called from a nested function"

def ditto1() -> { return ["ditto"]; }
ditto2 = () -> { return ["ditto"]; }; // ALTERNATIVELY: ditto2 = () -> return ["ditto"];
ditto3 = lambda () : ["ditto"]; // ALTERNATIVELY: lambda : ["ditto"];

sysln!(ditto1() + ditto2() + ditto3()); // prints "[ditto, ditto, ditto]"
// Note: ALL arguments without a default specified are defaulted to null