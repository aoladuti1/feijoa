foo = 10;

def func(foo: typeHint = 5, bar=2) {
    sysline(bar);
    return foo; // it will return 5 - see the way the scope is correct?
}

sysline(func(bar=700)); // prints 5 and then 700

// standard lambda syntax (see default args possible)

msgOne = (txt="default") -> { txt += ""; sysline(txt);  };

// parentheses are optional for a single argument
// curly braces are optional for a single function expression

msgTwo = txt -> sysline(txt);

msgOne("i am a lambda");
msgTwo(txt="i am also a lambda"); // arg selection still present

def lambdaCaller(a) { a(); }
lambdaCaller(() -> sysline("i am a function called with a lambda"));

// See Python-style lambdas:
pyDouble = lambda (x) : x * 2;
sysline("The double of 10 is " + pyDouble(10));