(*******************************************************************************
*
* feijoa (by antonio oladuti - 2022/23)
* computer science dept. @ royal holloway, university of london
*
*******************************************************************************)
prelude {import java.util.HashMap;}

support { 
	HashMap<String, Object> symbols = new HashMap<String, Object>(); // key, value = identifier, value
}

(* ONLY INTEGERS WORK AT THE MOMENT *)

whitespace &SIMPLE_WHITESPACE
whitespace &COMMENT_LINE_C
whitespace &COMMENT_BLOCK_C

statements ::= statement | statement statements
statement ::= mainExpr | sysout | sysline 

sysout ::= 'sysout' '(' mainExpr ')'
	{ System.out.print(mainExpr1.o); } ';'
	
sysline ::= 'sysline' '(' mainExpr ')'
	{ System.out.println(mainExpr1.o); } ';'
	
mainExpr <o: Object> ::= assign 
	| subExprA { mainExpr.o = subExprA1.o; }


subExprA <o: Object> ::= subExprB { subExprA.o = subExprB1.o; }
	| gtr { subExprA.o = gtr1.o; }
	| not { subExprA.o = not1.o; }

subExprB <o: Object> ::= subExprC { subExprB.o = subExprC1.o; }
	| plus { subExprB.o = plus1.o; }
	
subExprC <o: Object> ::= subExprD { subExprC.o = subExprD1.o; }
	| multiply { subExprC.o = multiply1.o; }

subExprD <o: Object> ::= operand { subExprD.o = operand1.o; }
	| exponentiate { subExprD.o = exponentiate1.o; }
		
gtr <o: Object> ::= subExprB '>' subExprB
		{ 	try {
				gtr.o = (Integer.compare(Integer.valueOf(subExprB1.o.toString()),
										 Integer.valueOf(subExprB2.o.toString()))) > 0;
			} catch (Exception FjException) {
				gtr.o = (Double.compare(Double.valueOf(subExprB1.o.toString()),
										Double.valueOf(subExprB2.o.toString()))) > 0;
			}
		}
		
not <o: Object> ::= '!' subExprA
	{ not.o = !(Boolean.valueOf(subExprA1.o.toString())); }
		
assign <o: Object> ::= ID '<-' subExprA ';' 
		{ symbols.put(ID1.v, subExprA1.o); }
		
plus <o: Object> ::= subExprB '+' subExprC
	{ 	try {
			plus.o = (Integer.valueOf(subExprB1.o.toString())
					+ Integer.valueOf(subExprC1.o.toString()));
		} 
		catch (Exception FjException) {
			try {
				plus.o = (Double.valueOf(subExprB1.o.toString())
						+ Double.valueOf(subExprC1.o.toString()));
			} 
			catch (Exception FJException2) {
				plus.o = (String) subExprB1.o + (String) subExprC1.o;
			}
		}
	}
					
multiply <o: Object> ::= subExprC '*' subExprD
	{ 	try {
			multiply.o = (Integer.valueOf(subExprC1.o.toString())
					    * Integer.valueOf(subExprD1.o.toString()));
		} 
		catch (Exception FjException) {
			multiply.o = (Double.valueOf(subExprC1.o.toString())
					    * Double.valueOf(subExprD1.o.toString()));
		}
	}
		
exponentiate <o: Object> ::= operand '**' subExprD
		{ 	try {
				exponentiate.o = Math.pow(
					Integer.valueOf(operand1.o.toString())
						, Integer.valueOf(subExprD1.o.toString()));
			} 
			catch (Exception FjException) {
				exponentiate.o = Math.pow(
					Double.valueOf(operand1.o.toString())
						, Double.valueOf(subExprD1.o.toString()));
			}
		}
	
operand <o: Object> ::= deref { operand.o = symbols.get(deref1.v); }
	| INTEGER
		{ operand.o = INTEGER1.v; }
	| REAL
		{ operand.o = REAL1.v; }
	| 'true'
		{ operand.o = Boolean.valueOf(true); }
	| 'false'
		{ operand.o = Boolean.valueOf(false); }
	| STRING_SQ
		{ operand.o = STRING_SQ1.v; }
	| '(' mainExpr ')'
		{ operand.o = mainExpr1.o; }
	| #
	
		
deref <v: String> ::= ID
	{ deref.v = ID1.v; }

ID <leftExtent:int rightExtent:int lexeme:String v:String> ::= 
  &ID {ID.lexeme = artLexeme(ID.leftExtent, ID.rightExtent); ID.v = artLexemeAsID(ID.leftExtent, ID.rightExtent); }  

INTEGER <leftExtent:int rightExtent:int lexeme:String v:int> ::= 
  &INTEGER {INTEGER.lexeme = artLexeme(INTEGER.leftExtent, INTEGER.rightExtent); INTEGER.v = artLexemeAsInteger(INTEGER.leftExtent, INTEGER.rightExtent); }  

REAL <leftExtent:int rightExtent:int lexeme:String v:Double> ::= 
  &REAL {REAL.lexeme = artLexeme(REAL.leftExtent, REAL.rightExtent); REAL.v = artLexemeAsReal(REAL.leftExtent, REAL.rightExtent); }
  
STRING_SQ <leftExtent:int rightExtent:int lexeme:String v:String> ::= 
  &STRING_SQ {STRING_SQ.lexeme = artLexeme(STRING_SQ.leftExtent, STRING_SQ.rightExtent); STRING_SQ.v = artLexemeAsString(STRING_SQ.leftExtent, STRING_SQ.rightExtent); }