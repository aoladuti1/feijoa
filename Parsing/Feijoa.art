(*******************************************************************************
*
* feijoa (by antonio oladuti - 2022/23)
* computer science dept. @ royal holloway, university of london
*
*******************************************************************************)
prelude {import java.util.HashMap; import java.util.ArrayList;}

support { 
	HashMap<String, Object> symbols = new HashMap<String, Object>(); // key, value = identifier, value

	
}

whitespace &SIMPLE_WHITESPACE
whitespace &COMMENT_LINE_C
whitespace &COMMENT_BLOCK_C

compStatements ::= '{' statements '}' | statement
statements ::= statement | statement statements
statement ::= defStruct | loopStatement | condStatement | mainExpr | sysout | sysline

structDefinition ::= '{' structStatements '}' | structStatement
structStatements ::= structStatement | structStatement structStatements
structStatement ::= memberAssign

defStruct ::= ID 
		{	try { 
				FJ.declareStruct(ID1.v); 
			} catch (Exception FJException) {
				System.err.println(FJException);
			}
			while (!FJ.curdef.equals(""))
				{ try {Thread.sleep(1);} catch (Exception FJException) {} } 
			FJ.curdef = ID1.v;
		} '<-' structDefinition { FJ.curdef = ""; }

loopStatement ::= whileExpr< compStatements<
		{	artEvaluate(
					loopStatement.whileExpr1, whileExpr1);
			while (FJ.bv(whileExpr1.o) == true) { 
				artEvaluate(
					loopStatement.compStatements1, compStatements1); 
                artEvaluate(
					loopStatement.whileExpr1, whileExpr1); 
            }
		}
	| untilExpr< compStatements<
		{	artEvaluate(
					loopStatement.untilExpr1, untilExpr1);
			while (FJ.bv(untilExpr1.o) == false) { 
				artEvaluate(
					loopStatement.compStatements1, compStatements1); 
                artEvaluate(
					loopStatement.untilExpr1, untilExpr1); 
            }
		}

condStatement ::= ifExpr compStatements< 
		{	if (FJ.bv(ifExpr1.o) == true) {
				artEvaluate(condStatement.compStatements1, compStatements1); 
			}
		}
	ifExpr compStatements< elifExpr compStatements<
		{ if (FJ.bv(ifExpr1.o) == true) {
			artEvaluate(condStatement.compStatements1, compStatements1); 
			}
		  else if (FJ.bv(elifExpr1.o)== true){
			artEvaluate(condStatement.compStatements2, compStatements2);  
		  }
		}
	| elifExpr compStatements< elifExpr compStatements<
		{	
			if (FJ.bv(elifExpr1.o) == false && FJ.bv(elifExpr2.o) == true) {
				artEvaluate(condStatement.compStatements2, compStatements2); 
			}
		}
	| ifExpr compStatements< 'else' compStatements<
		{
			if (FJ.bv(ifExpr1.o) == false) {
				artEvaluate(condStatement.compStatements2, compStatements2);
			} else {
				artEvaluate(condStatement.compStatements1, compStatements1);
			}
		}
	| elifExpr compStatements< 'else' compStatements<
		{
			if (FJ.bv(elifExpr1.o) == false) {
				artEvaluate(condStatement.compStatements2, compStatements2);
			}
		}
		
		
whileExpr <o: Object> ::= 'while' mainExpr
	{ whileExpr.o = mainExpr1.o; }

untilExpr <o: Object> ::= 'until' mainExpr
	{ untilExpr.o = mainExpr1.o; }
	
ifExpr <o: Object> ::= 'if' mainExpr
	{ ifExpr.o = mainExpr1.o; }
	
elifExpr <o: Object> ::= 'elif' mainExpr
	{ elifExpr.o = mainExpr1.o; }
	
	
sysout ::= 'sysout' '(' mainExpr ')'
	{ System.out.print(mainExpr1.o); } ';'
	
sysline ::= 'sysline' '(' mainExpr ')'
	{ System.out.println(mainExpr1.o); } ';'
	

memberAssign ::= ID '=' subExprA ';' 
		{ FJ.addMember(FJ.curdef, ID1.v, subExprA1.o); }
	
mainExpr <o: Object> ::= assign 
	| subExprA { mainExpr.o = subExprA1.o; }

subExprA <o: Object> ::= subExprB { subExprA.o = subExprB1.o; }
	| and { subExprA.o = and1.o; }
	| or  { subExprA.o = or1.o;  }
	| gtr { subExprA.o = gtr1.o; }
	| equ { subExprA.o = equ1.o; }
	
subExprB <o: Object> ::= subExprC { subExprB.o = subExprC1.o; }
	| plus { subExprB.o = plus1.o; }
	| minus { subExprB.o = minus1.o; }
	
subExprC <o: Object> ::= subExprD { subExprC.o = subExprD1.o; }
	| multiply { subExprC.o = multiply1.o; }

subExprD <o: Object> ::= subExprE { subExprD.o = subExprE1.o; }
	| exponentiate { subExprD.o = exponentiate1.o; }
	
subExprE <o: Object> ::= subExprF { subExprE.o = subExprF1.o; }
	| not { subExprE.o = not1.o; }
	| negate { subExprE.o = negate1.o; }
	
subExprF <o: Object> ::= operand { subExprF.o = operand1.o; }

equ <o: Object> ::= subExprB '==' subExprB
	{ equ.o = FJ.equ(subExprB1.o, subExprB2.o); }

gtr <o: Object> ::= subExprB '>' subExprB
	{ gtr.o = FJ.gtr(subExprB1.o, subExprB2.o); }
		
assign ::= ID '=' subExprA ';' 
		{ symbols.put(ID1.v, subExprA1.o); }
	| plusEquals
	| minusEquals
	
plusEquals <o: Object> ::= ID '+=' subExprC ';'	
	{ symbols.put(ID1.v, FJ.plus(symbols.get(ID1.v), subExprC1.o)); }
	
minusEquals <o: Object> ::= ID '-=' subExprC ';'
	{ symbols.put(ID1.v, FJ.minus(symbols.get(ID1.v), subExprC1.o)); }
		
plus <o: Object> ::= subExprB '+' subExprC
	{ plus.o = FJ.plus(subExprB1.o, subExprC1.o); }	
					
minus <o: Object> ::= subExprB '-' subExprC
	{ minus.o = FJ.minus(subExprB1.o, subExprC1.o); }
	
multiply <o: Object> ::= subExprC '*' subExprD
	{ multiply.o = FJ.multiply(subExprC1.o, subExprD1.o); }
		
exponentiate <o: Object> ::= subExprE '**' subExprD
	{ exponentiate.o = FJ.exponentiate(subExprE1.o, subExprD1.o); }
		
not <o: Object> ::= '!' subExprE
	{ not.o = !(FJ.bv(subExprE1.o)); }
	
negate <o: Object> ::= '-' subExprE
	{	try {
			negate.o = FJ.iv(subExprE1.o) * -1; 
		} catch (Exception FJException) {
			negate.o = FJ.dv(subExprE1.o) * -1;
		}
	}

and <o: Object> ::= subExprA '&&' subExprA 
	{ and.o = (FJ.bv(subExprA1.o)
			&& FJ.bv(subExprA2.o)); }

or <o: Object> ::= subExprA '||' subExprA 
	{ or.o = FJ.bv(subExprA1.o) || FJ.bv(subExprA2.o); }
	
operand <o: Object> ::= deref { operand.o = symbols.get(deref1.v); }
	| INTEGER
		{ operand.o = INTEGER1.v; }
	| REAL
		{ operand.o = REAL1.v; }
	| 'true'
		{ operand.o = FJ.bv(true); }
	| 'false'
		{ operand.o = FJ.bv(false); }
	| STRING_DQ
		{ operand.o = STRING_DQ1.v; }
	| '(' mainExpr ')'
		{ operand.o = mainExpr1.o; }
	| #
		
deref <v: String> ::= ID
	{ deref.v = ID1.v; }

ID <leftExtent:int rightExtent:int lexeme:String v:String> ::= 
  &ID {ID.lexeme = artLexeme(ID.leftExtent, ID.rightExtent); ID.v = artLexemeAsID(ID.leftExtent, ID.rightExtent); }  

INTEGER <leftExtent:int rightExtent:int lexeme:String v:int> ::= 
  &INTEGER {INTEGER.lexeme = artLexeme(INTEGER.leftExtent, INTEGER.rightExtent); INTEGER.v = artLexemeAsInteger(INTEGER.leftExtent, INTEGER.rightExtent); }  

REAL <leftExtent:int rightExtent:int lexeme:String v:Double> ::= 
  &REAL {REAL.lexeme = artLexeme(REAL.leftExtent, REAL.rightExtent); REAL.v = artLexemeAsReal(REAL.leftExtent, REAL.rightExtent); }
  
STRING_DQ <leftExtent:int rightExtent:int lexeme:String v:String> ::= 
  &STRING_DQ {STRING_DQ.lexeme = artLexeme(STRING_DQ.leftExtent, STRING_DQ.rightExtent); STRING_DQ.v = artLexemeAsString(STRING_DQ.leftExtent, STRING_DQ.rightExtent); }