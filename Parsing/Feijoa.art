(*******************************************************************************
*
* feijoa (by antonio oladuti - 2022/23)
* computer science dept. @ royal holloway, university of london
*
*******************************************************************************)
prelude {import java.util.HashMap; import java.util.ArrayList; import java.util.Scanner;}

support {
	
	FJCallStack callStack = new FJCallStack();
	STable symbols = new STable(callStack);
	FJSDStack SDStack = symbols.SDStack();
	FJSAStack SAStack = new FJSAStack(symbols);
	FJIDStack ids = new FJIDStack();
	FJLStack Lstack = new FJLStack();

	@SuppressWarnings("serial")
	public class FJSigReturn extends ARTException {
	private Value value;

	public FJSigReturn(String message) {
		super(message);
	}

	public FJSigReturn() {
		this("");
	}
	}

	@SuppressWarnings("serial")
	public class FJSigBreak extends ARTException {

		public FJSigBreak(String message) {
			super(message);
		}

		public FJSigBreak() {
			this("");
		}
	}

		@SuppressWarnings("serial")
	public class FJSigContinue extends ARTException {

		public FJSigContinue(String message) {
			super(message);
		}

		public FJSigContinue() {
			this("");
		}
	}
}

whitespace &SIMPLE_WHITESPACE
whitespace &COMMENT_LINE_C
whitespace &COMMENT_BLOCK_C

statements ::= statement | statement statements
compStatements ::= '{' '}' | scopeEnter statements scopeLeave | { symbols.newScope(); } statement { symbols.oldScope(); }
statement ::= defStruct | defFunc | loopStatement | condStatement | mainExpr ';' | returnExpr ';' | break | continue
structDefinition ::= '{' structStatements '}'
structStatements ::= structStatement | structStatement structStatements
structStatement ::= mainExpr ';' | defStruct | defFunc

fnStatements ::= '{' statements '}'
lambdaStatements ::= mainExpr | returnExpr | fnStatements

scopeEnter ::= '{' { symbols.newScope(); }
scopeLeave ::= '}' { symbols.oldScope(); }

defFunc ::= 'def' ID { ids.push(new FJFunction(ID1.v)); } mainDefFuncArgs fnStatements< 
	{	FJFunction fn = ids.top();
		if (callStack.current() != null) {
			fn.setOuterTables(callStack.current().funcVars);
		};
		fn.setProcedure(defFunc.fnStatements1);
		symbols.put(fn.name, FJ.newFunction(fn));
		ids.pop(); }

lambdaConstruct <o: FJTO> ::= { ids.push(new FJFunction("")); } javaLambdaArgs '->' lambdaStatements< 
	{   if (callStack.current() != null) {
			ids.top().setOuterTables(callStack.current().funcVars);
		};
		ids.top().setProcedure(lambdaConstruct.lambdaStatements1);
		lambdaConstruct.o = FJ.newFunction(ids.pop()); }
	|   { ids.push(new FJFunction("")); } 'lambda' pythonLambdaArgs lambdaReturn<
		{	if (callStack.current() != null) {
				ids.top().setOuterTables(callStack.current().funcVars);
			};
			ids.top().setProcedure(lambdaConstruct.lambdaReturn1);
		lambdaConstruct.o = FJ.newFunction(ids.pop()); }

pythonLambdaArgs ::= mainDefFuncArgs ':' | defFuncArgs ':' | ':'
javaLambdaArgs ::= mainDefFuncArgs | defFuncArg
mainDefFuncArgs ::= '(' ')' | '(' defFuncArgs ')'

defFuncArgs <c:int> ::= defFuncArg ',' defFuncArgs
	| defFuncArg

defFuncArg <o: FJTO> ::= argID optEquals
	{ ids.top().addArg(argID1.v, optEquals1.o); }

optEquals <o: FJTO> ::= # { optEquals.o =  null; }
	| '=' subExprA { optEquals.o = subExprA1.o; }

argID <v: String> ::= ID ':' AID {argID.v = ID1.v;} | ID { argID.v = ID1.v; }
defStruct ::= 'struct' ID 
		{ symbols.startStructDef(ID1.v); } structDefinition { symbols.endStructDef(); }

loopStatement ::= whileExpr< compStatements<
		{	artEvaluate(
					loopStatement.whileExpr1, whileExpr1);
			while (((boolean) whileExpr1.o.obj) == true) {
				try { 
					artEvaluate(
						loopStatement.compStatements1, compStatements1); 
				} catch (FJSigBreak FJBreak) {
					break;
				} catch (FJSigContinue FJContinue) {
					artEvaluate(
					loopStatement.whileExpr1, whileExpr1);
					continue;
				}
                artEvaluate(
					loopStatement.whileExpr1, whileExpr1); 
            }
		}
	| untilExpr< compStatements<
		{	artEvaluate(
					loopStatement.untilExpr1, untilExpr1);
			while (((boolean) untilExpr1.o.obj) == false) {
				try {
					artEvaluate(
						loopStatement.compStatements1, compStatements1); 
				} catch (FJSigBreak FJBreak) {
					break;
				} catch (FJSigContinue FJContinue) {
					artEvaluate(
						loopStatement.untilExpr1, untilExpr1);
					continue;
				}
                artEvaluate(
					loopStatement.untilExpr1, untilExpr1); 
            }
		}

condStatement ::= ifExpr compStatements<
		{	if (((boolean) ifExpr1.o.obj) == true) {
				artEvaluate(condStatement.compStatements1, compStatements1); 
			}
		}
	| ifExpr compStatements< elifExpr compStatements<
		{ if (((boolean) ifExpr1.o.obj) == true) {
			artEvaluate(condStatement.compStatements1, compStatements1); 
			}
		  else if (((boolean) elifExpr1.o.obj) == true) {
			artEvaluate(condStatement.compStatements2, compStatements2);  
		  }
		}
	| elifExpr compStatements< elifExpr compStatements<
		{	
			if (((boolean) elifExpr1.o.obj) == false && ((boolean) elifExpr2.o.obj) == true) {
				artEvaluate(condStatement.compStatements2, compStatements2); 
			}
		}
	| ifExpr compStatements< 'else' compStatements<
		{
			if ((boolean) ifExpr1.o.obj == false) {
				artEvaluate(condStatement.compStatements2, compStatements2);
			} else {
				artEvaluate(condStatement.compStatements1, compStatements1);
			}
		}
	| elifExpr compStatements< 'else' compStatements<
		{
			if ((boolean) elifExpr1.o.obj == false) {
				artEvaluate(condStatement.compStatements2, compStatements2);
			}
		}
		
whileExpr <o: FJTO> ::= 'while' subExprA
	{ whileExpr.o = subExprA1.o; }

untilExpr <o: FJTO> ::= 'until' subExprA
	{ untilExpr.o = subExprA1.o; }
	
ifExpr <o: FJTO> ::= 'if' subExprA
	{ ifExpr.o = subExprA1.o; }
	
elifExpr <o: FJTO> ::= 'elif' subExprA
	{ elifExpr.o = subExprA1.o; }
	
sysout ::= 'sysout!' '(' subExprA ')'
	{ System.out.print(subExprA1.o.obj); }
	
sysln ::= 'sysln!' '(' subExprA ')'
	{ System.out.println(subExprA1.o.obj); }

sysin <o: FJTO> ::= 'sysin!' '(' ')' 
	{ sysin.o = FJ.newString(new Scanner(System.in).nextLine());}
	
returnExpr <o: FJTO> ::= 'return' subExprA 
	{  callStack.setLastValue(subExprA1.o);
		if (true) throw new FJSigReturn(); }

break ::= 'break' ';'
	{ if (true) throw new FJSigBreak(); }

continue ::= 'continue' ';'
	{ if (true) throw new FJSigContinue(); }

lambdaReturn <o: FJTO> ::= subExprA 
	{  callStack.setLastValue(subExprA1.o);
		if (true) throw new FJSigReturn(); }
	
mainExpr <o: FJTO> ::= assign 
	| subExprA { mainExpr.o = subExprA1.o; }

mainFuncArgs ::= '(' ')' { callStack.fillArgs(); } | '(' funcArgs ')'

functionCall <o: FJTO> ::= voidFunctions { functionCall.o = FJ.newNull(); }
	| otherFunctions { functionCall.o = otherFunctions1.o; }
	| operand
		{
		  callStack.push((FJFunction) operand1.o.obj);
		} mainFuncArgs
	{	
		try {
			callStack.nextCall();
			symbols.newScope();
			if (callStack.topFunction().outerTables != null) {
				callStack.top().funcVars.addAll(callStack.topFunction().outerTables);
			}
			artEvaluate(callStack.topProcedure(), null);
		} catch (FJSigReturn FJsig) {
			;
		} finally {
			functionCall.o = callStack.getLastValue();
			callStack.pop();
			symbols.oldScope();
		}
	}

indexAccess <o: FJTO> ::= operand '[' subExprA ']' 
	{ indexAccess.o = ((FJList) operand1.o.obj).get((int) subExprA1.o.obj); }

funcArgs <o: FJTO> ::= subExprA argNote { callStack.processArg(subExprA1.o); } ',' funcArgs
	| ID argNote '=' subExprA { callStack.processArg(ID1.v, subExprA1.o); } ',' funcArgs
	| subExprA argNote { callStack.processLastArg(subExprA1.o); }
	| ID argNote '=' subExprA { callStack.processLastArg(ID1.v, subExprA1.o); }

voidFunctions ::= sysout | sysln | append | add

append ::= 'append!' '(' subExprA ',' subExprA ')'
	{ FJ.append(subExprA1.o, subExprA2.o); }

add ::= 'add!' '(' subExprA ',' subExprA ',' subExprA ')'
	{ FJ.add(subExprA1.o, subExprA2.o, subExprA3.o); }

otherFunctions <o: FJTO> ::= 
	  sysin { otherFunctions.o = sysin1.o; }
	| remove { otherFunctions.o = remove1.o; }
	| len { otherFunctions.o = len1.o; }
	| type { otherFunctions.o = type1.o; }
	| toInt { otherFunctions.o = toInt1.o; }
	| toDouble { otherFunctions.o = toDouble1.o; }
	| toBoolean { otherFunctions.o = toBoolean1.o; }
	| toString { otherFunctions.o = toString1.o; }

remove <o: FJTO> ::= 'remove!' '(' subExprA ',' subExprA ')'
	{ remove.o = FJ.remove(subExprA1.o, subExprA2.o); }

len <o: FJTO> ::= 'len!' '(' subExprA ')'
	{ len.o = FJ.len(subExprA1.o); }

type <o: FJTO> ::= 'type!' '(' subExprA ')' { type.o = FJ.newString(FJ.type(subExprA1.o)); }

toInt <o: FJTO> ::= integerOrInt '(' subExprA ')' { toInt.o = FJ.toInt(subExprA1.o); }
toDouble <o: FJTO> ::= doubleOrFloat '(' subExprA ')' { toDouble.o = FJ.toDouble(subExprA1.o); }
toBoolean <o: FJTO> ::= booleanOrBool '(' subExprA ')' { toBoolean.o = FJ.toBoolean(subExprA1.o); }
toString <o: FJTO> ::= stringOrStr '(' subExprA ')' { toString.o = FJ.toString(subExprA1.o); }
integerOrInt ::= 'integer' | 'int'
doubleOrFloat ::= 'double' | 'float'
booleanOrBool ::= 'boolean' | 'bool'
stringOrStr ::= 'string' | 'str'

subExprA <o: FJTO> ::= subExprB { subExprA.o = subExprB1.o; }
	| and { subExprA.o = and1.o; }
	| or  { subExprA.o = or1.o;  }
	| gtr { subExprA.o = gtr1.o; }
	| geq { subExprA.o = geq1.o; }
	| lss { subExprA.o = lss1.o; }
	| leq { subExprA.o = leq1.o; }
	| equ { subExprA.o = equ1.o; }
	
subExprB <o: FJTO> ::= subExprC { subExprB.o = subExprC1.o; }
	| plus { subExprB.o = plus1.o; }
	| minus { subExprB.o = minus1.o; }
	
subExprC <o: FJTO> ::= subExprD { subExprC.o = subExprD1.o; }
	| multiply { subExprC.o = multiply1.o; }
	| divide { subExprC.o = divide1.o; }
	| mod { subExprC.o = mod1.o; }

subExprD <o: FJTO> ::= subExprE { subExprD.o = subExprE1.o; }
	| exponentiate { subExprD.o = exponentiate1.o; }
	
subExprE <o: FJTO> ::= subExprF { subExprE.o = subExprF1.o; }
	| not { subExprE.o = not1.o; }
	| negate { subExprE.o = negate1.o; }
	
subExprF <o: FJTO> ::= operand { subExprF.o = operand1.o; }

equ <o: FJTO> ::= subExprB '==' subExprB
	{ equ.o = FJ.equ(subExprB1.o, subExprB2.o); }

gtr <o: FJTO> ::= subExprB '>' subExprB
	{ gtr.o = FJ.gtr(subExprB1.o, subExprB2.o); }

geq <o: FJTO> ::= subExprB '>=' subExprB
	{ geq.o = FJ.geq(subExprB1.o, subExprB2.o); }
	
lss <o: FJTO> ::= subExprB '<' subExprB
	{ lss.o = FJ.lss(subExprB1.o, subExprB2.o); }

leq <o: FJTO> ::= subExprB '<=' subExprB
	{ leq.o = FJ.leq(subExprB1.o, subExprB2.o); }
		
assign ::= AID '=' subExprA
		{ symbols.put(AID1.v, subExprA1.o); }
	| plusEquals 
	| minusEquals



	
structConstruct <o: FJTO> ::= 'new' AID 
	{	SAStack.push(AID1.v); } mainStructArgs { structConstruct.o = FJ.newStruct(SAStack.popStruct(), AID1.v); }

listConstruct <o: FJTO> ::= { Lstack.push(); } mainListArgs { listConstruct.o = FJ.newList(Lstack.pop()); }

mainListArgs ::= '[' ']'
	| '[' listArgs ']'
	| subExprA '..' subExprA
		{ Lstack.makeRange(subExprA1.o, subExprA2.o); }

listArgs ::= subExprA { Lstack.processArg(subExprA1.o); } ',' listArgs
	| subExprA { Lstack.processLastArg(subExprA1.o); }

mainStructArgs ::= '(' ')' { SAStack.fillArgs(); } | '(' structArgs ')'

structArgs <o: FJTO> ::= subExprA argNote { SAStack.processArg(subExprA1.o); } ',' structArgs
	| ID argNote '=' subExprA { SAStack.processArg(ID1.v, subExprA1.o); } ',' structArgs
	| subExprA argNote { SAStack.processLastArg(subExprA1.o); }
	| ID argNote '=' subExprA { SAStack.processLastArg(ID1.v, subExprA1.o); }

argNote ::= ':' AID | #
	
plusEquals ::= AID '+=' subExprB	
	{ symbols.put(AID1.v, FJ.plus(symbols.get(AID1.v), subExprB1.o)); }
	
minusEquals ::= AID '-=' subExprB
	{ symbols.put(AID1.v, FJ.minus(symbols.get(AID1.v), subExprB1.o)); }
		
plus <o: FJTO> ::= subExprB '+' subExprC
	{ plus.o = FJ.plus(subExprB1.o, subExprC1.o); }	
					
minus <o: FJTO> ::= subExprB '-' subExprC
	{ minus.o = FJ.minus(subExprB1.o, subExprC1.o); }
	
multiply <o: FJTO> ::= subExprC '*' subExprD
	{ multiply.o = FJ.multiply(subExprC1.o, subExprD1.o); }

mod <o: FJTO> ::= subExprC '%' subExprD
	{ mod.o = FJ.mod(subExprC1.o, subExprD1.o); }
	
divide <o: FJTO> ::= subExprC '/' subExprD
	{ divide.o = FJ.divide(subExprC1.o, subExprD1.o); }
		
exponentiate <o: FJTO> ::= subExprE '**' subExprD
	{ exponentiate.o = FJ.exponentiate(subExprE1.o, subExprD1.o); }
		
not <o: FJTO> ::= notSym subExprE
	{ not.o = FJ.not(subExprE1.o); }
notSym ::= '!' | 'not'
	
negate <o: FJTO> ::= '-' subExprE
	{	negate.o = FJ.negate(subExprE1.o); }
	
and <o: FJTO> ::= subExprA andSym subExprA 
	{ and.o = FJ.and(subExprA1.o, subExprA2.o); }
andSym ::= '&&' | 'and'

or <o: FJTO> ::= subExprA orSym subExprA 
	{ or.o = FJ.or(subExprA1.o, subExprA2.o); }
orSym ::= '||' | 'or'
	
walruses <o: FJTO> ::= preIncr { walruses.o = preIncr1.o; }
	| postIncr { walruses.o = postIncr1.o; }
	| preDecr { walruses.o = preDecr1.o; }
	| postDecr { walruses.o = postDecr1.o; }

preIncr <o: FJTO> ::= '++' AID	
	{ preIncr.o = FJ.plus(symbols.get(AID1.v), FJ.newInt(1));
	  symbols.put(AID1.v, preIncr.o); }

postIncr <o: FJTO> ::= AID '++'
	{ postIncr.o = symbols.get(AID1.v);
	  symbols.put(AID1.v, FJ.plus(postIncr.o, FJ.newInt(1))); }

preDecr <o: FJTO> ::= '--' AID	
	{ preDecr.o = FJ.minus(symbols.get(AID1.v), FJ.newInt(1));
	  symbols.put(AID1.v, preDecr.o); }

postDecr <o: FJTO> ::= AID '--'
	{ postDecr.o = symbols.get(AID1.v);
	  symbols.put(AID1.v, FJ.minus(postDecr.o, FJ.newInt(1))); }


operand <o: FJTO> ::= deref { operand.o = deref1.o; }
	| walruses { operand.o = walruses1.o; }
	| INTEGER
		{ operand.o = FJ.newInt(INTEGER1.v); }
	| REAL
		{ operand.o = FJ.newDouble(REAL1.v); }
	| 'true'
		{ operand.o = FJ.newBoolean(true); }
	| 'false'
		{ operand.o = FJ.newBoolean(false); }
	| STRING_DQ
		{ operand.o = FJ.newString(STRING_DQ1.v); }
	| lambdaConstruct
		{ operand.o = lambdaConstruct1.o; }
	| structConstruct
		{ operand.o = structConstruct1.o; }
	| structConstruct '.' AID 
		{ @SuppressWarnings("unchecked")
		 HashMap<String, FJTO> hm = (HashMap<String, FJTO>) structConstruct1.o.obj;
		 operand.o = symbols.fullGet(AID1.v.split(STable.selectOp), hm); }
	| listConstruct
		{ operand.o = listConstruct1.o; }
	| functionCall { operand.o = functionCall1.o; }
	| indexAccess { operand.o = indexAccess1.o; }
	| '(' mainExpr ')'
		{ operand.o = mainExpr1.o; }
		
deref <o: FJTO> ::= AID
	{ if (AID1.v == null) 
		deref.o = FJ.newNull();
	  else 
		deref.o = symbols.get(AID1.v); }

AID <v:String> ::= 'null' {AID.v = null;} | ID { AID.v = ID1.v; } | ID '.' AID { AID.v = ID1.v + '.' + AID1.v; }

ID <leftExtent:int rightExtent:int lexeme:String v:String> ::= 
  &ID {ID.lexeme = artLexeme(ID.leftExtent, ID.rightExtent); ID.v = artLexemeAsID(ID.leftExtent, ID.rightExtent); }  

INTEGER <leftExtent:int rightExtent:int lexeme:String v:int> ::= 
  &INTEGER {INTEGER.lexeme = artLexeme(INTEGER.leftExtent, INTEGER.rightExtent); INTEGER.v = artLexemeAsInteger(INTEGER.leftExtent, INTEGER.rightExtent); }  

REAL <leftExtent:int rightExtent:int lexeme:String v:double> ::= 
  &REAL {REAL.lexeme = artLexeme(REAL.leftExtent, REAL.rightExtent); REAL.v = artLexemeAsReal(REAL.leftExtent, REAL.rightExtent); }
  
STRING_DQ <leftExtent:int rightExtent:int lexeme:String v:String> ::= 
  &STRING_DQ {STRING_DQ.lexeme = artLexeme(STRING_DQ.leftExtent, STRING_DQ.rightExtent); STRING_DQ.v = artLexemeAsString(STRING_DQ.leftExtent, STRING_DQ.rightExtent); }